package pl.luckboy.purfuncor.frontend

object BuiltinFunction extends Enumeration
{
  // Boolean
  val ZNot = Value("zNot")
  val ZAnd = Value("zAnd")
  val ZOr = Value("zOr")
  val ZXor = Value("zXor")
  val ZEq = Value("zEq")
  val ZNe = Value("zNe")
  val Cond = Value("cond")
  // Char
  val CEq = Value("cEq")
  val CNe = Value("cNe")
  val CharFromInt = Value("charFromInt")
  // Byte
  val BNeg = Value("bNeg")
  val BNot = Value("bNot")
  val BAdd = Value("bAdd")
  val BSub = Value("bSub")
  val BMul = Value("bMul")
  val BDiv = Value("bDiv")
  val BMod = Value("bMod")
  val BLsh = Value("bLsh")
  val BRsh = Value("bRsh")
  val BAnd = Value("bAnd")
  val BOr = Value("bOr")
  val BXor = Value("bXor")
  val BEq = Value("bEq")
  val BNe = Value("bNe")
  val BLt = Value("bLt")
  val BLe = Value("bLe")
  val BGt = Value("bGt")
  val BGe = Value("bGe")
  val ByteFromShort = Value("byteFromShort")
  val ByteFromInt = Value("byteFromInt")
  val ByteFromLong = Value("byteFromLong")
  val ByteFromFloat = Value("byteFromFloat")
  val ByteFromDouble = Value("byteFromDouble")
  // Short
  val SNeg = Value("sNeg")
  val SNot = Value("sNot")
  val SAdd = Value("sAdd")
  val SSub = Value("sSub")
  val SMul = Value("sMul")
  val SDiv = Value("sDiv")
  val SMod = Value("sMod")
  val SLsh = Value("sLsh")
  val SRsh = Value("sRsh")
  val SAnd = Value("sAnd")
  val SOr = Value("sOr")
  val SXor = Value("sXor")
  val SEq = Value("sEq")
  val SNe = Value("sNe")
  val SLt = Value("sLt")
  val SLe = Value("sLe")
  val SGt = Value("sGt")
  val SGe = Value("sGe")
  val ShortFromByte = Value("shortFromByte")
  val ShortFromInt = Value("shortFromInt")
  val ShortFromLong = Value("shortFromLong")
  val ShortFromFloat = Value("shortFromFloat")
  val ShortFromDouble = Value("shortFromDouble")
  // Int
  val INeg = Value("iNeg")
  val INot = Value("iNot")
  val IAdd = Value("iAdd")
  val ISub = Value("iSub")
  val IMul = Value("iMul")
  val IDiv = Value("iDiv")
  val IMod = Value("iMod")
  val ILsh = Value("iLsh")
  val IRsh = Value("iRsh")
  val IAnd = Value("iAnd")
  val IOr = Value("iOr")
  val IXor = Value("iXor")
  val IEq = Value("iEq")
  val INe = Value("iNe")
  val ILt = Value("iLt")
  val ILe = Value("iLe")
  val IGt = Value("iGt")
  val IGe = Value("iGe")
  val IntFromChar = Value("intFromChar")
  val IntFromByte = Value("intFromByte")
  val IntFromShort = Value("intFromShort")
  val IntFromLong = Value("intFromLong")
  val IntFromFloat = Value("intFromFloat")
  val IntFromDouble = Value("intFromDouble")
  // Long
  val LNeg = Value("lNeg")
  val LNot = Value("lNot")
  val LAdd = Value("lAdd")
  val LSub = Value("lSub")
  val LMul = Value("lMul")
  val LDiv = Value("lDiv")
  val LMod = Value("lMod")
  val LLsh = Value("lLsh")
  val LRsh = Value("lRsh")
  val LAnd = Value("lAnd")
  val LOr = Value("lOr")
  val LXor = Value("lXor")
  val LEq = Value("lEq")
  val LNe = Value("lNe")
  val LLt = Value("lLt")
  val LLe = Value("lLe")
  val LGt = Value("lGt")
  val LGe = Value("lGe")
  val LongFromByte = Value("longFromByte")
  val LongFromShort = Value("longFromShort")
  val LongFromInt = Value("longFromInt")
  val LongFromFloat = Value("longFromFloat")
  val LongFromDouble = Value("longFromDouble")
  // Float
  val FNeg = Value("fNeg")
  val FAdd = Value("fAdd")
  val FSub = Value("fSub")
  val FMul = Value("fMul")
  val FDiv = Value("fDiv")
  val FEq = Value("fEq")
  val FNe = Value("fNe")
  val FLt = Value("fLt")
  val FLe = Value("fLe")
  val FGt = Value("fGt")
  val FGe = Value("fGe")
  val FloatFromByte = Value("floatFromByte")
  val FloatFromShort = Value("floatFromShort")
  val FloatFromInt = Value("floatFromInt")
  val FloatFromLong = Value("floatFromLong")
  val FloatFromDouble = Value("floatFromDouble")
  // Double
  val DNeg = Value("dNeg")
  val DAdd = Value("dAdd")
  val DSub = Value("dSub")
  val DMul = Value("dMul")
  val DDiv = Value("dDiv")
  val DEq = Value("dEq")
  val DNe = Value("dNe")
  val DLt = Value("dLt")
  val DLe = Value("dLe")
  val DGt = Value("dGt")
  val DGe = Value("dGe")
  val DoubleFromByte = Value("doubleFromByte")
  val DoubleFromShort = Value("doubleFromShort")
  val DoubleFromInt = Value("doubleFromInt")
  val DoubleFromLong = Value("doubleFromLong")
  val DoubleFromFloat = Value("doubleFromFloat")
  // Array
  val EmptyArray = Value("emptyArray")
  val Array = Value("array")
  val Length = Value("length")
  val MapNthOrElse = Value("mapNthOrElse")
  val Updated = Value("updated")
}