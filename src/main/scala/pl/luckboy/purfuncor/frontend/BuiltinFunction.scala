package pl.luckboy.purfuncor.frontend

object BuiltinFunction extends Enumeration
{
  // Boolean
  val BlNot = Value("#blNot")
  val BlAnd = Value("#blAnd")
  val BlOr = Value("#blOr")
  val BlXor = Value("#blXor")
  val BlEq = Value("#blEq")
  val BlNe = Value("#blNe")
  val Cond = Value("#cond")
  // Char
  val CEq = Value("#cEq")
  val CNe = Value("#cNe")
  val CFromI = Value("#cFromI")
  // Byte
  val BNeg = Value("#bNeg")
  val BNot = Value("#bNot")
  val BAdd = Value("#bAdd")
  val BSub = Value("#bSub")
  val BMul = Value("#bMul")
  val BDiv = Value("#bDiv")
  val BMod = Value("#bMod")
  val BLsh = Value("#bLsh")
  val BRsh = Value("#bRsh")
  val BAnd = Value("#bAnd")
  val BOr = Value("#bOr")
  val BXor = Value("#bXor")
  val BEq = Value("#bEq")
  val BNe = Value("#bNe")
  val BLt = Value("#bLt")
  val BLe = Value("#bLe")
  val BGt = Value("#bGt")
  val BGe = Value("#bGe")
  val BFromS = Value("#bFromS")
  val BFromI = Value("#bFromI")
  val BFromL = Value("#bFromL")
  val BFromF = Value("#bFromF")
  val BFromD = Value("#bFromD")
  // Short
  val SNeg = Value("#sNeg")
  val SNot = Value("#sNot")
  val SAdd = Value("#sAdd")
  val SSub = Value("#sSub")
  val SMul = Value("#sMul")
  val SDiv = Value("#sDiv")
  val SMod = Value("#sMod")
  val SLsh = Value("#sLsh")
  val SRsh = Value("#sRsh")
  val SAnd = Value("#sAnd")
  val SOr = Value("#sOr")
  val SXor = Value("#sXor")
  val SEq = Value("#sEq")
  val SNe = Value("#sNe")
  val SLt = Value("#sLt")
  val SLe = Value("#sLe")
  val SGt = Value("#sGt")
  val SGe = Value("#sGe")
  val SFromB = Value("#sFromB")
  val SFromI = Value("#sFromI")
  val SFromL = Value("#sFromL")
  val SFromF = Value("#sFromF")
  val SFromD = Value("#sFromD")
  // Int
  val INeg = Value("#iNeg")
  val INot = Value("#iNot")
  val IAdd = Value("#iAdd")
  val ISub = Value("#iSub")
  val IMul = Value("#iMul")
  val IDiv = Value("#iDiv")
  val IMod = Value("#iMod")
  val ILsh = Value("#iLsh")
  val IRsh = Value("#iRsh")
  val IAnd = Value("#iAnd")
  val IOr = Value("#iOr")
  val IXor = Value("#iXor")
  val IEq = Value("#iEq")
  val INe = Value("#iNe")
  val ILt = Value("#iLt")
  val ILe = Value("#iLe")
  val IGt = Value("#iGt")
  val IGe = Value("#iGe")
  val IFromC = Value("#iFromC")
  val IFromB = Value("#iFromB")
  val IFromS = Value("#iFromS")
  val IFromL = Value("#iFromL")
  val IFromF = Value("#iFromF")
  val IFromD = Value("#iFromD")
  // Long
  val LNeg = Value("#lNeg")
  val LNot = Value("#lNot")
  val LAdd = Value("#lAdd")
  val LSub = Value("#lSub")
  val LMul = Value("#lMul")
  val LDiv = Value("#lDiv")
  val LMod = Value("#lMod")
  val LLsh = Value("#lLsh")
  val LRsh = Value("#lRsh")
  val LAnd = Value("#lAnd")
  val LOr = Value("#lOr")
  val LXor = Value("#lXor")
  val LEq = Value("#lEq")
  val LNe = Value("#lNe")
  val LLt = Value("#lLt")
  val LLe = Value("#lLe")
  val LGt = Value("#lGt")
  val LGe = Value("#lGe")
  val LFromB = Value("#lFromB")
  val LFromS = Value("#lFromS")
  val LFromI = Value("#lFromI")
  val LFromF = Value("#lFromF")
  val LFromD = Value("#lFromD")
  // Float
  val FNeg = Value("#fNeg")
  val FAdd = Value("#fAdd")
  val FSub = Value("#fSub")
  val FMul = Value("#fMul")
  val FDiv = Value("#fDiv")
  val FEq = Value("#fEq")
  val FNe = Value("#fNe")
  val FLt = Value("#fLt")
  val FLe = Value("#fLe")
  val FGt = Value("#fGt")
  val FGe = Value("#fGe")
  val FFromB = Value("#fFromB")
  val FFromS = Value("#fFromS")
  val FFromI = Value("#fFromI")
  val FFromL = Value("#fFromL")
  val FFromD = Value("#fFromD")
  // Double
  val DNeg = Value("#dNeg")
  val DAdd = Value("#dAdd")
  val DSub = Value("#dSub")
  val DMul = Value("#dMul")
  val DDiv = Value("#dDiv")
  val DEq = Value("#dEq")
  val DNe = Value("#dNe")
  val DLt = Value("#dLt")
  val DLe = Value("#dLe")
  val DGt = Value("#dGt")
  val DGe = Value("#dGe")
  val DFromB = Value("#dFromB")
  val DFromS = Value("#dFromS")
  val DFromI = Value("#dFromI")
  val DFromL = Value("#dFromL")
  val DFromF = Value("#dFromF")
  // Array
  val EmptyArray = Value("#emptyArray")
  val Array = Value("#array")
  val Length = Value("#length")
  val MapNthOrElse = Value("#mapNthOrElse")
  val Updated = Value("#updated")
}